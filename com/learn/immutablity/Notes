Immutable class - any modification in the state of object results in a new instance creation.
Useful in multi thread environment and for caching
Create custom immutable class 
	mark class as final
		because you can make super call from sub class and this class's constructor.
		you can do method overriding in sub class and define alternate behavior. And use sub class instances wherever immutable class instance are needed.
	mark fields as final
		this guarantees the field will only be instantiated at the time of construction of instance
		compiler time error is given if final field is modified anywhere
	no setter methods
	always return new instance from methods which modify state of instance
	for mutable fields
		ensure to make cloned copy of the passed in argument in constructor and set your mutable field to this cloned copy.
		ensure to return cloned copy of this field whenever needed
	
		